version: 2.1

orbs:
  docker: circleci/docker@2.6.0

executors:
  default-docker:
    working_directory: &WORKING_DIR /home/circleci/project/git
    docker:
      - image: node:18-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2204:2023.04.2 # Ref: https://circleci.com/developer/machine/image/ubuntu-2204

jobs:
  Setup:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: |
            apk --no-cache add bash
            apk --no-cache add git
            apk --no-cache add ca-certificates
            apk --no-cache add curl
            apk --no-cache add openssh-client
            apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake jq
            apk add --no-cache -t openssl ncurses coreutils libgcc linux-headers grep util-linux binutils findutils
            npm install -g node-gyp
      - checkout
      - run:
          name: Install dependencies (using yarn install)
          command: yarn install --frozen-lockfile
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-v2-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  Tests:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: |
            apk --no-cache add bash
            apk --no-cache add git
            apk --no-cache add ca-certificates
            apk --no-cache add curl
            apk --no-cache add openssh-client
            apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake jq
            apk add --no-cache -t openssl ncurses coreutils libgcc linux-headers grep util-linux binutils findutils
            npm install -g node-gyp
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Create test-results directory
          command: mkdir -p /home/circleci/project/git/test-results
      - run:
          name: Execute unit tests
          command: yarn test
      - store_test_results:
          path: /home/circleci/project/git/test-results
      - store_artifacts:
          path: /home/circleci/project/git/test-results/jest.xml

  Lint:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Execute linting
          command: yarn lint

  License Audit:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Run Yarn License HTML Report
          command: yarn run licenses-html --output ./license-audit-report.html
      - store_artifacts:
          path: ./license-audit-report.html
          destination: license-audit-report.html

  Vulnerability Test:
    docker:
      - image: owasp/dependency-check:latest
    steps:
      - checkout
      - run:
          name: Run OWASP Dependency-Check with NVD API Key
          command: |
            /usr/share/dependency-check/bin/dependency-check.sh --project "$CIRCLE_PROJECT_REPONAME" --scan ./ --format "HTML" --out ./dependency-check-report.html --nvdApiKey $NVD_API_KEY
      - store_artifacts:
          path: ./dependency-check-report.html
          destination: dependency-check-report.html

  # New Build job to run the yarn build
  Build:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Build the project
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - ./dist  # Replace with your actual build output

  # Renamed the old Build step to Docker Build
  Docker Build:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: local"
            docker build -t $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  Publish:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-v2-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: /tmp  # Attach workspace to reuse build artifacts
      - run:
          name: Check NPM registry
          command: npm config get registry
      - run:
          name: Check package contents
          command: ls -la dist
      - run:
          name: Publish to NPM with verbose logging
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
            npm publish --access public --verbose
          environment:
            NPM_TOKEN: $NPM_TOKEN
      - run:
          name: Clear Yarn cache (optional)
          command: yarn cache clean

workflows:
  version: 2
  build_and_test:
    jobs:
      - Setup:
          context: pm4ml-ci
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - Tests:
          context: pm4ml-ci
          requires:
            - Setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - Lint:
          context: pm4ml-ci
          requires:
            - Setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - License Audit:
          context: pm4ml-ci
          requires:
            - Setup
      - Vulnerability Test: 
          context: pm4ml-ci
          requires:
            - Setup
      - Build:  
          context: pm4ml-ci
          requires:
            - Lint
      - Publish:
          context: pm4ml-ci
          requires:
            - Build
          filters:
            branches:
              only:
                - master
                - release/*
