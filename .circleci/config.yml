# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  docker: circleci/docker@2.6.0
  slack: circleci/slack@4.12.5 # Ref: https://github.com/mojaloop/ci-config/tree/main/slack-templates

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add bash
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake jq
  apk add --no-cache -t openssl ncurses coreutils libgcc linux-headers grep util-linux binutils findutils
  npm install -g node-gyp

defaults_machine_Dependencies: &defaults_machine_Dependencies |
  sudo apt update
  sudo apt install -y docker
  sudo apt install -y docker-compose
  sudo apt install -y musl-dev
  sudo apt install -y build-essential

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &WORKING_DIR /home/circleci/project/git
    docker:
      - image: node:16.15.0-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine
#      - image: node:lts-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2204:2023.04.2 # Ref: https://circleci.com/developer/machine/image/ubuntu-2204

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          name: Update NPM install (using `npm ci`)
          command: npm ci
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-v2-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  test-unit:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          keys:
          - dependency-cache-v2-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Execute unit tests
          command: npm test
      - store_test_results:
          path: /home/circleci/project/git/
      - store_artifacts:
          path: /home/circleci/project/git/junit.xml

  test-integration:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start docker-compose
          command: docker-compose -f docker-compose.yml -f docker-compose.integration.yml up -d
      - run:
          name: Execute integration tests
          command: docker exec -it scheme-adapter-int sh -c 'npm run test:int'
      - run:
          name: Copy results from docker
          command: docker cp scheme-adapter-int:/junit.xml .
      - store_test_results:
          path: /home/circleci/project/git
      - store_artifacts:
          path: /home/circleci/project/git/junit.xml

  lint:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
          - dependency-cache-v2-{{ checksum "package-lock.json" }}
      - run:
          name: Execute linting
          command: npm run lint

  audit-licenses:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - checkout
      - restore_cache:
          key: dependency-cache-v2-{{ checksum "package-lock.json" }}
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results

  build:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: local"
            docker build -t $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar
  # publish:
  #   docker:
  #     - image: jdrouet/docker-with-buildx:0.9.1
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: default
  #     - run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
  #     - run: |
  #         docker buildx create --name mycustombuilder --driver docker-container --bootstrap
  #         docker buildx use mycustombuilder
  #         docker buildx inspect
  #     - run: |
  #         export IMAGE_TAG=$(echo $CIRCLE_TAG | tr -d v)
  #         echo "tag is $IMAGE_TAG"
  #         docker buildx build --push \
  #           --platform linux/arm/v7,linux/arm64/v8,linux/amd64 \
  #           --tag $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG .
  #publish:
  #  executor: default-machine
  #  steps:
  #    - checkout
  #    - run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
  #    - run:
  #        name: Build Docker image and push
  #        command: |
  #          export IMAGE_TAG=$(echo $CIRCLE_TAG | tr -d v)
  #          echo "tag is $IMAGE_TAG"
  #          docker build --tag $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG .
  #          docker push $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$IMAGE_TAG

  license-scan:
    executor: default-machine
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImages=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local make run
      - store_artifacts:
          path: /tmp/license-scanner/results


##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: pm4ml-ci
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - test-unit:
          context: pm4ml-ci
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - lint:
          context: pm4ml-ci
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - audit-licenses:
          context: pm4ml-ci
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - build:
          context: pm4ml-ci
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
#  deploy:
#    jobs:
#      - publish:
#          context: pm4ml-ci
#          filters:
#            tags:
#              only: /v[0-9]+(\.[0-9]+)*(\-snapshot(\.[0-9]+))?(\-hotfix(\.[0-9]+))?/
#            branches:
#              ignore:
#                - /.*/
